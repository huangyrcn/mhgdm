# configs/ae.yaml
defaults: # 默认配置，会被后续的配置覆盖
  - data :  TRIANGLES # 默认数据集配置
  - fsl_task : 10shot  # 默认少样本学习任务配置
  - _self_ # 允许引用本文档中的其他配置


# 实验配置
exp_name: "${data.name}_${model.model_type}_model_train" # 实验名称，由数据集名称和模型类型组成
timestamp: ${now:%Y%m%d_%H%M%S} # 当前时间戳
run_name: ${exp_name}_${timestamp}  # 运行名称，自动组合实验名称和时间戳
debug: false # 是否开启调试模式

data: # 数据相关配置
  batch_size: 1024 # 批处理大小

seed: 4 # 随机种子
device: auto # 运行设备 (例如 "cuda", "cpu", "auto" 表示自动选择)
device_count: 1 # 使用的设备数量

model: # 模型详细配置
  # 1. 核心架构与组件 (Core Architecture & Components)
  model_type: ae                    # 模型类型：自编码器 (HVAE)
  encoder: GCN                      # 编码器类型：图卷积网络
  decoder: ${model.encoder}         # 解码器类型：与编码器相同 (GCN)
  enc_layers: 5                     # 编码器层数
  dec_layers: 3                     # 解码器层数
  # GNN组件配置 (GNN Component Configuration)
  layer_type: GAT     # 图层类型
  conv: GCN                         # 卷积方式
  aggregation_method: sum           # 特征聚合方法
  
  # 2. 维度定义 (Dimension Definitions)
  dim: 64                           # 潜在空间维度 (从10调整，目标是提升训练集拟合能力)
  hidden_dim: 128                    # 隐藏层维度
  edge_dim: 1                       # 边特征维度
  
  # 3. 几何空间配置 (Geometric Space Configuration)
  #    对于 manifold: Euclidean, 曲率参数 c 通常不使用。
  manifold: PoincareBall            # 流形类型：当前设置为PoincareBall，但文件名ae_euc.yaml暗示可能应为Euclidean
  c: 1                              # 曲率参数
  learnable_c: false                # 曲率是否可学习
  
  # 4. 通用层参数与操作 (Common Layer Parameters & Operations)
  act: LeakyReLU                    # 激活函数
  dropout: 0.0                      # 丢弃率
  use_norm: ln                      # 归一化类型：层归一化(layer norm)
  normalization_factor: 1           # 归一化系数
  msg_transform: true               # 是否对消息进行变换 (特定于某些GNN层)
  sum_transform: true               # 是否对求和结果进行变换 (特定于某些GNN层)
  
  # 5. 任务与损失组件启用配置 (Task & Loss Component Enablement)
  #    控制模型中各个预测任务和损失组件是否激活。
  pred_node_class: true           # (HVAE) 是否进行节点级别预测/重构 (对应 node_classification_loss，其权重由 train.rec_weight 控制)
  use_kl_loss: true                # (HVAE) 是否使用KL散度损失 (对应 kl_loss，其权重由 train.kl_regularization 控制)
  pred_edge: true                  # (HVAE) 是否进行边预测 (对应 edge_loss，其权重由 train.edge_weight 控制)
  pred_graph_class: true            # (HVAE) 是否进行图级别分类 (对应 graph_classification_loss，其权重由 train.graph_classification_weight 控制)
  use_base_proto_loss: true        # (HVAE) 是否使用基础原型损失 (图表征与其目标原型的距离损失，对应 base_loss_proto，权重由 train.base_proto_weight 控制)
  use_sep_proto_loss: ture          # (HVAE) 是否使用原型分离损失 (不同类别原型间的距离损失，对应 loss_proto_separation，权重由 train.sep_proto_weight 控制)
  use_centroid: false             # (HVAE) 是否使用质心距离 (此配置项当前在HVAE模型代码中未明确使用其效果，可考虑移除或验证其用途)
  
  # 6. 图分类器专属配置 (Graph Classifier Specific Configuration)
  #    这些配置仅当 model.pred_graph_class 为 true 时，且HVAE内部的graph_classifier被初始化时生效。
  classifier_dropout: 0.0           # (HVAE.graph_classifier) 分类器内部线性层的Dropout率
  classifier_bias: true             # (HVAE.graph_classifier) 分类器内部线性层是否使用偏置
  
  # 7. 其他/外部AE模型参数 (Other / Potentially External AE Model Parameters)
  #    这些参数可能源自其他AE模型配置 (如 configs/model/ae.yaml 中提到的ScoreNetwork相关参数)，并可能被当前模型的某些组件使用。
  adj: ScoreNetworkA_poincare
  x: ScoreNetworkX_poincare
  adim: 32
  c_final: 4
  c_hid: 8
  c_init: 2
  depth: 5
  nhid: 32
  num_heads: 4
  num_layers: 7
  num_linears: 2
  proto_margin: 1.0                 # (可能与原型学习相关，但具体用法需查阅 ScoreNetwork 或相关模块的实现)

train: # 训练相关配置
  # 1. 优化器配置 (Optimizer Configuration)
  lr: 0.1                        # 学习率 (尝试从 0.001 调整)
  lr_decay: 0.999                   # 学习率衰减率
  lr_schedule: true                 # 是否使用学习率调度
  weight_decay: 0.0001              # 权重衰减 (L2正则化)
  eps: 1.0e-05                      # AdamW 等优化器中的 epsilon 参数，防止除以零

  # 2. 损失函数权重与正则化 (Loss Function Weights & Regularization)
  #    控制不同损失分量在总损失中的相对重要性。
  rec_weight: 0.2                   # 节点级别预测/重构损失的权重 (若 model.pred_node_class 为 true)
  kl_regularization: 1.0e-05        # KL散度正则化系数 (若 model.use_kl_loss 为 true)
  edge_weight: 1.0e-02              # 边预测损失的权重 (若 model.pred_edge 为 true)
  graph_classification_weight: 0   # 图级别分类损失的权重 (若 model.pred_graph_class 为 true)
  base_proto_weight: 0.5        # 基础原型损失的权重 (若 model.use_base_proto_loss 为 true)
  sep_proto_weight: 1        # 原型分离损失的权重 (若 model.use_sep_proto_loss 为 true)

  
  reduce_mean: true                 # 是否对损失/指标进行平均 (通常在trainer中处理，此处配置可能为全局开关或特定用途)
  
  # 3. 训练流程控制 (Training Process Control)
  num_epochs: 10                 # 训练轮数
  grad_norm: 1.0                    # 梯度裁剪的范数阈值
  ema: 0.999                        # 指数移动平均 (Exponential Moving Average) 的衰减率

  # 4. 日志与保存间隔 (Logging & Saving Intervals)
  eval_interval: 50                 # 评估间隔 (epochs)
  print_interval: 50                # 打印间隔 (epochs)
  save_interval: 50                 # 保存间隔 (epochs)

# Hydra配置框架设置
hydra:
  run:
    dir: .
  output_subdir: null
  job_logging:
    disable_existing_loggers: False
    formatters: null
    handlers: null
    root: null
    
    version: 1
  verbose: false

# 实验追踪配置 (W&B - Weights & Biases)
wandb:
  no_wandb: true                   # 是否禁用wandb
  online: true                      # 在线模式 (false为离线记录)
  project: MHGDM                    # 项目名称
  wandb_usr: huangyr                # 用户名
  entity: huangyr_team              # 团队名称

